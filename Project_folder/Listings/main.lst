C51 COMPILER V9.60.0.0   MAIN                                                              04/12/2021 14:59:57 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: E:\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main.lst) OB
                    -JECT(.\Objects\main.obj)

line level    source

   1          #include <at89c5131.h>
   2          #include <stdio.h>
   3          #include <lcd.h>                    //Header file with LCD interfacing functions
   4          #include "serial.c"             //C file with UART interfacing functions
   5          
   6          unsigned int LFSR = 0x01;                       //LFSR intially holding (0,0,1)
   7          unsigned int timer_count = 0;                   //For creating 1s delays                
   8          unsigned int count = 0;
   9          unsigned int max_count = 0;
  10          extern bit game_over_flag;
  11          bit timer_1s_flag;
  12          
  13          /**********************************************************
  14            delay_1s():
  15                  Generates 1 second delays 
  16                  using Timer 0 in mode 1.
  17          ***********************************************************/
  18          void delay_1s(void)                     
  19          {
  20   1              unsigned int i = 0;
  21   1              TH0 = 0x3C;                                     //Load TH0 and TL0 for 1s delay
  22   1              TL0 = 0xB0;
  23   1              ET0 = 1;
  24   1              for (i; i<40; i++){
  25   2                      TR0 = 1;                                //Start Timer
  26   2                      while(TF0==0);                  //Wait for timer to overflow
  27   2                      TR0 = 0;                                //Pause timer
  28   2                      TH0 = 0x3C;                             //Reload TH0, TL0 values 
  29   2                      TL0 = 0xB0;
  30   2                      TF0 = 0;                                //Reset Flag
  31   2              }
  32   1              ET0=0;
  33   1              return;
  34   1      }
  35          
  36          /**********************************************************
  37            find_next_state():
  38                  Generates pseudorandom LFSR values.
  39                  LFSR_next = (b2^b0,b2,b1)
  40          ***********************************************************/
  41          unsigned int find_next_state() 
  42          {       
  43   1              unsigned int next_state = LFSR;
  44   1              
  45   1              next_state = (LFSR&7)>>1;
  46   1              next_state |= (((LFSR&1)<<2) ^ (LFSR&4));
  47   1              return next_state;
  48   1      }
  49          
  50          /**********************************************************
  51            draw_next(state):
  52                  Draws the next LCD column according to 
  53                  the LFSR value and state (column of pattern).  
  54          ***********************************************************/
C51 COMPILER V9.60.0.0   MAIN                                                              04/12/2021 14:59:57 PAGE 2   

  55          void draw_next(unsigned int state) 
  56          {
  57   1              unsigned char top_pattern[3]={0}, bottom_pattern[3]={0};
  58   1              unsigned int top_loc = ((0x0f+count)%40)|0x80;
  59   1              unsigned int bottom_loc = (0x40+(0x0f+count)%40)|0x80;
  60   1              
  61   1              switch(LFSR)
  62   1              {
  63   2                      case 1:                                                                 
  64   2                                      top_pattern[0] = ' ';
  65   2                                      top_pattern[1] = '*';
  66   2                                      top_pattern[2] = '*';
  67   2      
  68   2                                      bottom_pattern[0] = ' ';
  69   2                                      bottom_pattern[1] = ' ';
  70   2                                      bottom_pattern[2] = ' ';
  71   2                                      break;
  72   2                      
  73   2                      case 4: 
  74   2                                      top_pattern[0] = ' ';
  75   2                                      top_pattern[1] = ' ';
  76   2                                      top_pattern[2] = ' ';
  77   2      
  78   2                                      bottom_pattern[0] = ' ';
  79   2                                      bottom_pattern[1] = '*';
  80   2                                      bottom_pattern[2] = '*';
  81   2                                      break;
  82   2      
  83   2                      case 6: 
  84   2                                      top_pattern[0] = ' ';
  85   2                                      top_pattern[1] = '*';
  86   2                                      top_pattern[2] = ' ';
  87   2      
  88   2                                      bottom_pattern[0] = ' ';
  89   2                                      bottom_pattern[1] = ' ';
  90   2                                      bottom_pattern[2] = ' ';
  91   2                                      break;
  92   2      
  93   2                      case 7:
  94   2                                      top_pattern[0] = ' ';
  95   2                                      top_pattern[1] = ' ';
  96   2                                      top_pattern[2] = ' ';
  97   2      
  98   2                                      bottom_pattern[0] = ' ';
  99   2                                      bottom_pattern[1] = ' ';
 100   2                                      bottom_pattern[2] = '*';
 101   2                                      break;
 102   2      
 103   2                      case 3: 
 104   2                                      top_pattern[0] = ' ';
 105   2                                      top_pattern[1] = ' ';
 106   2                                      top_pattern[2] = ' ';
 107   2      
 108   2                                      bottom_pattern[0] = ' ';
 109   2                                      bottom_pattern[1] = '*';
 110   2                                      bottom_pattern[2] = ' ';
 111   2                                      break;
 112   2                      
 113   2                      case 5: 
 114   2                                      top_pattern[0] = ' ';
 115   2                                      top_pattern[1] = ' ';
 116   2                                      top_pattern[2] = '*';
C51 COMPILER V9.60.0.0   MAIN                                                              04/12/2021 14:59:57 PAGE 3   

 117   2      
 118   2                                      bottom_pattern[0] = ' ';
 119   2                                      bottom_pattern[1] = ' ';
 120   2                                      bottom_pattern[2] = ' ';
 121   2                                      break;
 122   2                      
 123   2                      case 2: 
 124   2                                      top_pattern[0] = ' ';
 125   2                                      top_pattern[1] = ' ';
 126   2                                      top_pattern[2] = ' ';
 127   2      
 128   2                                      bottom_pattern[0] = ' ';
 129   2                                      bottom_pattern[1] = ' ';
 130   2                                      bottom_pattern[2] = ' ';
 131   2                                      break;          
 132   2              }
 133   1              
 134   1              lcd_cmd(top_loc);                                                       //write pattern according to LFSR and count
 135   1              lcd_write_char(top_pattern[state]);
 136   1              lcd_cmd(bottom_loc);
 137   1              lcd_write_char(bottom_pattern[state]);
 138   1      
 139   1              return;
 140   1      }
 141          
 142          /**********************************************************
 143            action():
 144                  Shifts display by shifting everything left, then moving D right.
 145                  If D collides with *, then returns 1.  
 146          ***********************************************************/
 147          unsigned int action() 
 148          {
 149   1              unsigned int cmd = 0;                           //Declare and initialize variables 
 150   1              unsigned int addr_D = (0x02+count)%40;  // 0x02 -> initial position, count -> no. of steps taken, 40-> num
             -ber of columns in one row
 151   1              unsigned int up_or_down = 0;                    // if down, thne add 0x40 to addr_D to get the exact address of "D"
 152   1              unsigned char temp = 0;
 153   1              
 154   1              EA = 0;                                                         //Disable interrupts to hold up-down movement of D
 155   1              
 156   1              //Find and store address of D
 157   1              temp = lcd_read(addr_D);
 158   1              if(temp !='D')
 159   1              {
 160   2                      up_or_down = 0x40;      
 161   2              }
 162   1      
 163   1              //Display Shift
 164   1      
 165   1              lcd_cmd(0x18);                                          //Shift display to the left by 1
 166   1              
 167   1              cmd = (addr_D + up_or_down) | 0x80;                             //Convert address to command
 168   1              
 169   1              //If * at location of D, then game over
 170   1              if((addr_D+up_or_down)!=0x27 && (addr_D+up_or_down) != 0x67)            //If addresses are not corner cases
 171   1              {
 172   2                      if(lcd_read((addr_D+1)%40 + up_or_down)=='*')
 173   2                      {
 174   3                              return 1;                                               //Game over
 175   3                      }
 176   2                      
 177   2                      //Else write D back to it's original position and remove the D in second column
C51 COMPILER V9.60.0.0   MAIN                                                              04/12/2021 14:59:57 PAGE 4   

 178   2                      lcd_cmd(cmd);                                           //Move cursor to old location of D
 179   2                      lcd_write_string(" D");                         //Write " " at old location, and move D to next column
 180   2              }
 181   1              else                    //Corner case addresses (0x27 and 0x67)
 182   1              {
 183   2                      if(lcd_read(up_or_down)=='*')
 184   2                      {
 185   3                              return 1;
 186   3                      }
 187   2      
 188   2                      lcd_cmd(cmd);
 189   2                      lcd_write_string(" ");
 190   2                      lcd_cmd(up_or_down + 0x80);
 191   2                      lcd_write_string("D");
 192   2              }
 193   1              
 194   1              EA=1;                                                                   //Enable interrupts to enable D movement
 195   1              return 0;
 196   1      }
 197          
 198          /**********************************************************
 199            start_game():
 200                  Show the first screen of the game 
 201                  and enables interrupts (user inputs).  
 202          ***********************************************************/
 203          void start_game(void) 
 204          {
 205   1              //Initializations
 206   1              game_over_flag = 0;                                                             //Both flags initially 0
 207   1              timer_1s_flag = 0;
 208   1              count = 0;                                                      //Keeps track of score
 209   1              ES = 1;
 210   1              EA = 1;                                                         //Enable interrupts
 211   1      
 212   1              //Display game
 213   1              lcd_cmd(0x01);                                          //Clear LCD
 214   1              lcd_cmd(0x82);                                          //Write D at row 1 col 3
 215   1              lcd_write_string("D");
 216   1      
 217   1              return;
 218   1      }
 219          
 220          /**********************************************************
 221            score_sceen(void):
 222                  Disables interrupts then shows your score
 223                  and highest score of the session for 3s.  
 224          ***********************************************************/
 225          void score_screen(void) 
 226          {
 227   1              unsigned char score[16] = {0};                          //Declare and initialize variables
 228   1              unsigned char highscore[16] = {0};
 229   1              
 230   1              EA = 0;                                                         //Disable interrupts
 231   1              lcd_cmd(0x01);                                          //Clear screen
 232   1      
 233   1              //Show Score 
 234   1              lcd_cmd(0x80);  
 235   1              if(count<100)                                   //if score less than 100, then 2 digit score
 236   1              {
 237   2                      sprintf(score,"Score:        %d",count);                
 238   2                      lcd_write_string(score);
 239   2              }
C51 COMPILER V9.60.0.0   MAIN                                                              04/12/2021 14:59:57 PAGE 5   

 240   1              else                                                    // 3 digit score
 241   1              {
 242   2                      sprintf(score,"Score:       %d",count);         
 243   2                      lcd_write_string(score);
 244   2              }
 245   1              
 246   1      
 247   1              //Show Highscore 
 248   1              if(max_count<100)
 249   1              {
 250   2                      lcd_cmd(0xC0);  
 251   2                      sprintf(highscore,"High Score:   %d",max_count);                
 252   2                      lcd_write_string(highscore);
 253   2              }
 254   1              else
 255   1              {
 256   2                      lcd_cmd(0xC0);  
 257   2                      sprintf(highscore,"High Score:  %d",max_count);         
 258   2                      lcd_write_string(highscore);
 259   2              }
 260   1              //Wait 3s then return
 261   1              EA=1;
 262   1              ES=0;                   //No serial interrupt
 263   1              delay_1s();
 264   1              delay_1s();
 265   1              delay_1s();
 266   1              return;
 267   1      }
 268          
 269          
 270          
 271          void main(void)
 272          {
 273   1              //Initialize port P1 for output from P1.7-P1.4
 274   1              P1 = 0x0F;
 275   1              
 276   1              //Call initialization functions
 277   1              lcd_init();
 278   1              uart_init();                    //Uses T1 for baud rate generation
 279   1      
 280   1              //Config T0 for 1s delay interrupts
 281   1              TMOD |= 0x01;                   //Set mode of T0 to mode 1
 282   1              TH0 = 0x3C;
 283   1              TL0 = 0x45;
 284   1      
 285   1              start_game();
 286   1      
 287   1              while(1)
 288   1              {
 289   2                      timer_1s_flag  = 0;                                                             //Redo F1 = 0 before every 1s interval
 290   2                      ET0 = 1;                                                                //Enable timer interrupts
 291   2                      TR0 = 1;                                                                //Start timer
 292   2      
 293   2                      while(game_over_flag == 0 && timer_1s_flag == 0);                               //Wait till game over or 1s over
 294   2      
 295   2                      ET0 = 0;                                                                //Disable Timer Interrupts
 296   2      
 297   2                      if(game_over_flag == 1)                                                         //If D moved to collide with *
 298   2                      {                                                                               //then F0 set => game over
 299   3                              score_screen();
 300   3                              start_game();
 301   3                              continue;
C51 COMPILER V9.60.0.0   MAIN                                                              04/12/2021 14:59:57 PAGE 6   

 302   3                      }
 303   2      
 304   2                      game_over_flag = action();                                      //Proceed to next state
 305   2                      if(game_over_flag==1)                                           //If * collided with D then
 306   2                      {                                                                               //game_over_flag = 1
 307   3                              score_screen();
 308   3                              start_game();
 309   3                              continue;
 310   3                      }
 311   2                      count++; 
 312   2                      draw_next(count%3);                                             //Generate pattern at the end of LCD
 313   2                      if(max_count<count)
 314   2                      {
 315   3                              max_count = count;
 316   3                      }
 317   2                      if(count%3 == 0)                                                // Find state of LFSR every 3s
 318   2                      {
 319   3                              LFSR = find_next_state();
 320   3                      }
 321   2                      
 322   2              }
 323   1      }
 324          
 325          /**********************************************************
 326            T0_ISR(void):
 327                  Interrupt Service Routine for Timer 0.
 328                  Makes T0 count 50,000 and keeps track of 
 329                  number of overflows. When it reaches 40, 
 330                  sets F1 and pauses timer.  
 331          ***********************************************************/
 332          void T0_ISR(void) interrupt 1
 333          {
 334   1              timer_count ++;                                                         //Count till 40 for 1s.
 335   1              TH0 = 0x3C;
 336   1              TL0 = 0xB0;
 337   1              if(timer_count == 40)                                           //Set flag F1 when 1s reached
 338   1              {
 339   2                      timer_count = 0;
 340   2                      timer_1s_flag = 1;
 341   2                      TR0 = 0;                                                                //Pause Timer
 342   2              }
 343   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1470    ----
   CONSTANT SIZE    =    111    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      8      51
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
